{"version":3,"sources":["style/index.ts","Components/ChartFrame.tsx","Components/Overview.tsx","Components/ActiveVSinactive.tsx","App.tsx","functions/index.ts","serviceWorker.ts","index.tsx"],"names":["createMuiTheme","palette","primary","main","light","dark","contrastText","secondary","error","ChartFrame","p","Paper","elevation","style","margin","width","padding","Box","marginBottom","fontSize","fontWeight","title","children","Overview","height","data","top","right","left","bottom","strokeDasharray","dataKey","stackId","fill","ActiveVSinactive","reduce","acc","el","aggregate","active","factory","home","inactive","infected","off","quarantine","sick","vacation","type","stroke","activeDot","r","App","aggregatedData","map","day","date","moment","format","companies","forEach","people_factory","people_home","people_off","people_quarantine","people_sick","people_infected","aggregateDate","apiPayload","ThemeProvider","theme","mainTheme","display","flexDirection","flexWrap","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.30bbd2d7.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport default createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#212121',\r\n      light: '#3d3d3d',\r\n      dark: '#000',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      main: '#8a8a8a',\r\n      light: '#a3a3a3',\r\n      dark: '#5c5c5c',\r\n      contrastText: '#fff',\r\n    },\r\n    error: {\r\n      main: '#d14949',\r\n      light: '#df7272',\r\n      dark: '#9d3434',\r\n      contrastText: '#fff',\r\n    },\r\n  },\r\n})\r\n\r\nexport const colors = {\r\n  warning: '#bfce43',\r\n  alarm: '#d14949',\r\n  regular: '#4fc469',\r\n  darkGrey: '#7e7e7e',\r\n  lightGrey: '#e5e5e5',\r\n  disconnected: '#888888',\r\n}\r\n\r\nexport const containerStyle = {\r\n  maxWidth: '1152px',\r\n  marginTop: '15px',\r\n  marginBottom: '15px',\r\n  margin: 'auto',\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Box from '@material-ui/core/Box'\r\n\r\ninterface Props {\r\n  children?: ReactNode\r\n  title: string\r\n}\r\n\r\nconst ChartFrame = (p: Props) => {\r\n  return (\r\n    <Paper elevation={1} style={{margin: '15px', width: \"600px\", padding: '25px'}}>\r\n      <Box style={{ marginBottom: '20px', fontSize: '18px', fontWeight: 'bold'}}>{p.title}</Box>\r\n      <Box>\r\n        {p.children}\r\n      </Box>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default ChartFrame","import React from 'react'\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'\r\nimport { AggregatedData } from '../Interfaces'\r\nimport ChartFrame from '../Components/ChartFrame'\r\n\r\ninterface Props {\r\n  data: AggregatedData[] \r\n}\r\n\r\nconst Overview = (p: Props) => {\r\n  return (\r\n    <ChartFrame title=\"Workers location overview\">\r\n      <BarChart \r\n        width={600} \r\n        height={300} \r\n        data={p.data}\r\n        margin={{top: 20, right: 30, left: 20, bottom: 5}}\r\n      >\r\n      <CartesianGrid strokeDasharray=\"3 3\"/>\r\n      <XAxis dataKey=\"date\"/>\r\n      <YAxis/>\r\n      <Tooltip/>\r\n      <Legend />\r\n      <Bar dataKey=\"factory\" stackId=\"a\" fill=\"#0a005a\" />\r\n      <Bar dataKey=\"home\" stackId=\"a\" fill=\"#295ef4\" />\r\n      <Bar dataKey=\"vacation\" stackId=\"a\" fill=\"#a7ffca\" />\r\n      <Bar dataKey=\"off\" stackId=\"a\" fill=\"#27f67a\" />\r\n      <Bar dataKey=\"quarantine\" stackId=\"a\" fill=\"#18c75e\" />\r\n      <Bar dataKey=\"sick\" stackId=\"a\" fill=\"#0c9c46\" />\r\n      <Bar dataKey=\"infected\" stackId=\"a\" fill=\"#025e27\" />\r\n      </BarChart>\r\n    </ChartFrame>\r\n  );\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react'\r\nimport {  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'\r\nimport { AggregatedData } from '../Interfaces'\r\nimport ChartFrame from './ChartFrame'\r\n\r\ninterface Props {\r\n  data: AggregatedData[] \r\n}\r\n\r\ninterface Aggregated {\r\n  active: number\r\n  inactive: number\r\n}\r\n\r\nconst ActiveVSinactive = (p: Props) => {\r\n  const data = p.data.reduce((acc: Aggregated[], el) => {\r\n    const aggregate = {\r\n      active: el.factory + el.home,\r\n      inactive: el.infected + el.off + el.quarantine + el.sick + el.vacation\r\n    }\r\n    return [...acc, aggregate]\r\n  }, [])\r\n  return (\r\n    <ChartFrame title=\"Active vs inactive workers\">\r\n      <LineChart\r\n        width={600}\r\n        height={300}\r\n        data={data}\r\n        margin={{\r\n          top: 5, right: 30, left: 20, bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"date\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Line type=\"monotone\" dataKey=\"active\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n        <Line type=\"monotone\" dataKey=\"inactive\" stroke=\"#82ca9d\" />\r\n      </LineChart>\r\n    </ChartFrame>\r\n  );\r\n}\r\n\r\nexport default ActiveVSinactive\r\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport Box from '@material-ui/core/Box'\nimport mainTheme from './style'\nimport './style/index.css'\nimport Overview from './Components/Overview'\nimport apiPayload from './data/data.json'\nimport { Data } from './Interfaces'\nimport { aggregateDate } from './functions'\nimport HomeVsOnplace from './Components/ActiveVSinactive'\n\nconst App = () => {\n\n  const data: Data[] = apiPayload.data\n  const aggregatedData =  aggregateDate(data)\n\n  return (\n    <ThemeProvider theme={mainTheme}>\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n      >\n        <Overview data={aggregatedData}/>\n        <HomeVsOnplace data={aggregatedData}/>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { Data, AggregatedData } from '../Interfaces'\r\nimport moment from 'moment'\r\n\r\nexport const aggregateDate = (data: Data[]): AggregatedData[] => {\r\n  return data.map((day) => {\r\n    const date = moment(day.date).format('DD-MM')\r\n    let factory = 0\r\n    let home = 0\r\n    let vacation = 0\r\n    let off = 0\r\n    let quarantine = 0\r\n    let sick = 0\r\n    let infected = 0\r\n    day.companies.forEach(el => {\r\n      factory += el.people_factory\r\n      home += el.people_home\r\n      vacation += el.people_off\r\n      off += el.people_factory\r\n      quarantine += el.people_quarantine\r\n      sick += el.people_sick\r\n      infected += el.people_infected\r\n    })\r\n    return {\r\n      date, factory, home, vacation, off, quarantine, sick, infected\r\n    }\r\n  })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}